ENTITY RELATIONSHIP DIAGRAM

      User
        |
        |
 |------|-------------|
 |                    |
 //                   //         |----Users (through Messages)
 |                    |          |
 |                    |          //
 |                    |          |
 |                    |          |
 |---^--Messages      |---^--Chatroom/s (through Messages)
                                  |
                                  |
                                  //
                                  |
                                  |---^--Messages

MODEL RELATIONSHIPS

User
has_many :messages
has_many :chatrooms, through: :messages

Message
belongs_to :chatroom
belongs_to :user

Chatroom
has_many :messages, dependent: :destroy
has_many :users, through: :messages

chatroom has_many users and (through message) user has_many chatrooms

SUMMARY OF "through:" relationships

Has many through: http://guides.rubyonrails.org/association_basics.html#the-has-many-through-association this is an association of one model with another model through a third model. In this case it's a many-to-many association. An example given by Rails Guides is physician has_many appointments AND has_many patients while a patient has_many appointments and has_many physicians. The third model is the appointment which belongs_to physician AND patient while the physician has_many patients through: appointments and the the patient has_many physicians through: appointments.

Another example is the relationship of a car to an engine to pistons. An car has one engine which belongs to the car. The engine has many pistons which belong to the engine. A car has many pistons through the engine and the pistons have one car through the engine.
IN PRACTICE we just call car.pistons INSTEAD OF car.engine.pistons


FORM_FOR authenticity_token and remote
https://apidock.com/rails/ActionView/Helpers/FormHelper/form_for
Are passing custom authenticity_token?? That's what it is used for
remote: this is set to true so the Unobstrusive JS drivers are controlling the behaviour of submit, has something to do with ajax - not sure what that really means.... may have to look into JS later on


ACTION CABLE
The Connection class is where we would authorize the incoming connection—for example, establishing a channel to a given user’s inbox, which requires user authorization. We don't need this for our application as any user can join a chat at anytime.
The Channel class is for any shared logic amongst any of the channels that we have created, however, we'll only be created one channel - the message channel - and will not need to alter this.

Three main steps in which there are sub-steps:
- Estabilshing the websocket Connection
  - server side WS Connection
  - client side WS Connection
- Building the Action cable channel
  - Define the AC channel
  - Broadcast the AC channel
  - Redis the AC channel
    - this is a pretty important component as the server broadcasts messages to this and the subscribed streams messages over the 'messages' channel maintained by redis.
- Defining the ACtion cable channel's subscriber
  -


Interesting code for moving through a hash
<% nations = { 'United States of America' => 'USA', 'Canada' => 'Canada', 'Mexico'=> 'Mexico', 'United Kingdom' => 'UK' }%>  <p>    <b>Country</b><br />

<% list = nations.sort       list.each {|x| %>        <%= f.radio_button :country, x[1] %> <%= h(x[0]) %><br />    <% } %>  </p>

the h(x[0]) is the interesting part


FOR THE MULTI MESSAGE STUFF

App.messages = App.cable.subscriptions.create('MessagesChannel', {
  received: function(data) {
    $("#messages").removeClass('hidden')
    return $('#messages').append(this.renderMessage(data));
  },
  renderMessage: function(data) {
    return "<p> <b>" + data.user + ": </b>" + data.message + "</p>";
  }
});

// App.messages = App.cable.subscriptions.create('MessagesChannel', {
//   received: function(data) {
//     $("#messages").removeClass('hidden')
//     return $("[data-chatroom='" + data.chatroom_id + "']").append(data.message);
//   }
// });
//
// $(document).on('turbolinks:load', function() {
//   submitNewMessage();
// });
//
// function submitNewMessage(){
//   $('textarea#message_content').keydown(function(event) {
//     if (event.keyCode == 13) {
//         var msg = event.target.value
//         var chatroomId = $("[data-chatroom]").data().chatroom
//         App.messages.send({message: msg, chatroom_id: chatroomId})
//         $('[data-textarea="message"]').val(" ")
//         return false;
//      }
//   });
// }

//
// $(document).on('turbolinks:load', function() {
//   submitNewMessage();
// });
//
// <% Chatroom.all.each do |chatroom| %>
//
//   App['room' + <%=chatroom.id%>] = App.cable.subscriptions.create({channel: 'MessagesChannel', room: <%=chatroom.id%>}, {
//   received: function(data) {
//    $("[data-chatroom='" + this.chatroomId + "']").removeClass('hidden')
//     return $("[data-chatroom='" + this.chatroomId + "']").append(data.message);
//   },
//
//   setChatroomId: function(chatroomId) {
//     this.chatroomId = chatroomId
//   }
// });
// <% end %>
//
// function submitNewMessage(){
//   $('textarea#message_content').keydown(function(event) {
//     if (event.keyCode == 13) {
//         var msg = event.target.value
//         var chatroomId = $("[data-chatroom]").data().chatroom
//         App['room' + chatroomId].setChatroomId(chatroomId)
//         App['room' + chatroomId].send({message: msg})
//         $('[data-textarea="message"]').val(" ")
//         return false;
//      }
//   });
// }

// $(document).on('turbolinks:load', function() {
//   submitNewMessage();
// });
//
// // not sure why but this stops the messager from working.
// App.messages = App.cable.subscriptions.create('MessagesChannel', {
//   received: function(data) {
//     $("#messages").removeClass('hidden')
//     return $("[data-chatroom='" + data.chatroom_id + "']").append(data.message);
//   }
// });
//
//
// $(document).on('turbolinks:load', function() {
//   submitNewMessage();
// });
//
// function submitNewMessage(){
//   $('textarea#message_content').keydown(function(event) {
//     if (event.keyCode = = = 13) {
//         var msg = event.target.value
//         var chatroomId = $("[data-chatroom]").data().chatroom
//         // this is where magic happens of sending data to the Messages Channel to be broadcast
//         App.messages.send({message: msg, chatroom_id: chatroomId})
//         $('[data-textarea="message"]').val(" ")
//         return false;
//      }
//   });
// }

// jQuery(document).on('turbolinks:load', function() {
//   var messages, messages_to_bottom;
//   messages = $('#messages');
//   if ($('#messages').length > 0) {
//     messages_to_bottom = function() {
//       return messages.scrollTop(messages.prop("scrollHeight"));
//     };
//     messages_to_bottom();
//     App.global_chat = App.cable.subscriptions.create('MessagesChannel', {
//      received: function(data) {
//         messages.append(data['message']);
//         return messages_to_bottom();
//       },
//       send_message: function(message, chat_room_id) {
//         return this.perform('send_message', {
//           message: message,
//           chat_room_id: chat_room_id
//         });
//       }
//     });
//     return $('#new_message').submit(function(e) {
//       var $this, textarea;
//       $this = $(this);
//       textarea = $this.find('#message_body');
//       if ($.trim(textarea.val()).length > 1) {
//         App.messages.send_message(textarea.val(), messages.data('chat-room-id'));
//         textarea.val('');
//       }
//       e.preventDefault();
//       return false;
//     });
//   }
// });


// jQuery(document).on('turbolinks:load', function() {
//   var messages, messages_to_bottom;
//   messages = $('#messages');
//   if ($('#messages').length > 0) {
//     messages_to_bottom = function() {
//       return messages.scrollTop(messages.prop("scrollHeight"));
//     };
//     messages_to_bottom();
//     App.global_chat = App.cable.subscriptions.create({
//       channel: "ChatRoomsChannel",
//       chat_room_id: messages.data('chat-room-id')
//     }, { received: function(data) {
//         messages.append(data['message']);
//         return messages_to_bottom();
//       },
//       send_message: function(message, chat_room_id) {
//         return this.perform('send_message', {
//           message: message,
//           chat_room_id: chat_room_id
//         });
//       }
//     });
//     return $('#new_message').submit(function(e) {
//       var $this, textarea;
//       $this = $(this);
//       textarea = $this.find('#message_body');
//       if ($.trim(textarea.val()).length > 1) {
//         App.global_chat.send_message(textarea.val(), messages.data('chat-room-id'));
//         textarea.val('');
//       }
//       e.preventDefault();
//       return false;
//     });
//   }
// });





App.messages =
App.cable.subscriptions.create
('MessagesChannel',
{
  received: function(data)
  {$("#messages").removeClass('hidden') return $('#messages').append(this.renderMessage(data));},
  renderMessage: function(data)
  {return "<p> <b>" + data.user + ": </b>" + data.message + "</p>";}
}
);

//= require materialize/extras/nouislider
// = require materialize-sprockets


<button type="button" class="btn btn-default navbar-btn">
 <li>
  <%= link_to "chatrooms", chatrooms_path, class: "btn navbar-btn", type: "button" %>
 </li>
</button>
<button>
  <%= link_to "chatrooms", chatrooms_path, class: "btn navbar-btn", type: "button"  %>
</button>
